<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.2 on win32)" generated="20230910 14:23:49.287" rpa="false">
<suite id="s1" name="Automation-Demo" source="C:\Users\Antec\eclipse-workspace\Automation-Demo">
<suite id="s1-s1" name="AdminDemo" source="C:\Users\Antec\eclipse-workspace\Automation-Demo\AdminDemo.robot">
<test id="s1-s1-t1" name="Test Github actions">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n-----&gt; Actual ENV: ${ENV}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20230910 14:23:50.086" level="INFO">
-----&gt; Actual ENV: ta</msg>
<status status="PASS" starttime="20230910 14:23:50.085" endtime="20230910 14:23:50.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>-----&gt; Actual LANG: ${LANG}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20230910 14:23:50.087" level="INFO">-----&gt; Actual LANG: en</msg>
<status status="PASS" starttime="20230910 14:23:50.086" endtime="20230910 14:23:50.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>-----&gt; Actual BROWSER: ${BROWSER}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20230910 14:23:50.087" level="INFO">-----&gt; Actual BROWSER: Chrome</msg>
<status status="PASS" starttime="20230910 14:23:50.087" endtime="20230910 14:23:50.087"></status>
</kw>
<tags>
<tag>JMap</tag>
<tag>Transparency</tag>
</tags>
<status status="PASS" starttime="20230910 14:23:50.085" endtime="20230910 14:23:50.087" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Open Facbook Test">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n-----&gt; Open Facebook:</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20230910 14:23:50.089" level="INFO">
-----&gt; Open Facebook:</msg>
<status status="PASS" starttime="20230910 14:23:50.089" endtime="20230910 14:23:50.089"></status>
</kw>
<kw name="Open Url">
<arguments>
<arg>https://www.facebook.com/</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${BROWSER}'=='Chrome'</arg>
<arg>Open Chrome</arg>
</arguments>
<kw name="Open Chrome">
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>selenium.webdriver.ChromeOptions()</arg>
<arg>modules=selenium, selenium.webdriver</arg>
</arguments>
<assign>
<var>${chrome options}</var>
</assign>
<msg timestamp="20230910 14:23:50.091" level="INFO">${chrome options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0421A430&gt;</msg>
<status status="PASS" starttime="20230910 14:23:50.091" endtime="20230910 14:23:50.091"></status>
</kw>
<kw name="Call Method" library="BuiltIn">
<doc>Calls the named method of the given object with the provided arguments.</doc>
<arguments>
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>--no-sandbox</arg>
</arguments>
<status status="PASS" starttime="20230910 14:23:50.091" endtime="20230910 14:23:50.092"></status>
</kw>
<kw name="Call Method" library="BuiltIn">
<doc>Calls the named method of the given object with the provided arguments.</doc>
<arguments>
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>disable-gpu</arg>
</arguments>
<status status="PASS" starttime="20230910 14:23:50.092" endtime="20230910 14:23:50.092"></status>
</kw>
<kw name="Call Method" library="BuiltIn">
<doc>Calls the named method of the given object with the provided arguments.</doc>
<arguments>
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>--ignore-certificate-errors</arg>
</arguments>
<status status="PASS" starttime="20230910 14:23:50.092" endtime="20230910 14:23:50.092"></status>
</kw>
<kw name="Call Method" library="BuiltIn">
<doc>Calls the named method of the given object with the provided arguments.</doc>
<arguments>
<arg>${chrome_options}</arg>
<arg>to_capabilities</arg>
</arguments>
<assign>
<var>${var}</var>
</assign>
<msg timestamp="20230910 14:23:50.093" level="INFO">${var} = {'browserName': 'chrome', 'version': '', 'platform': 'ANY', 'goog:chromeOptions': {'extensions': [], 'args': ['--no-sandbox', 'disable-gpu', '--ignore-certificate-errors']}}</msg>
<status status="PASS" starttime="20230910 14:23:50.093" endtime="20230910 14:23:50.093"></status>
</kw>
<kw name="Create Webdriver" library="SeleniumLibrary">
<doc>Creates an instance of Selenium WebDriver.</doc>
<arguments>
<arg>driver_name=Chrome</arg>
<arg>alias=google</arg>
<arg>chrome_options=${chrome_options}</arg>
</arguments>
<msg timestamp="20230910 14:23:50.094" level="INFO">Creating an instance of the Chrome WebDriver.</msg>
<status status="PASS" starttime="20230910 14:23:50.093" endtime="20230910 14:23:57.576"></status>
</kw>
<status status="PASS" starttime="20230910 14:23:50.090" endtime="20230910 14:23:57.576"></status>
</kw>
<status status="PASS" starttime="20230910 14:23:50.090" endtime="20230910 14:23:57.577"></status>
</kw>
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the active browser instance to the provided ``url``.</doc>
<arguments>
<arg>${url}</arg>
</arguments>
<msg timestamp="20230910 14:23:57.577" level="INFO">Opening url 'https://www.facebook.com/'</msg>
<status status="PASS" starttime="20230910 14:23:57.577" endtime="20230910 14:24:09.148"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20230910 14:24:09.148" endtime="20230910 14:24:09.260"></status>
</kw>
<status status="PASS" starttime="20230910 14:23:50.089" endtime="20230910 14:24:09.260"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Wait Until Element Contains</arg>
<arg>//a[@data-testid='open-registration-form-button']</arg>
<arg>Créer nouveau compte</arg>
<arg>timeout=60s</arg>
</arguments>
<kw name="Wait Until Element Contains" library="SeleniumLibrary">
<doc>Waits until element ``locator`` contains ``text``.</doc>
<arguments>
<arg>//a[@data-testid='open-registration-form-button']</arg>
<arg>Créer nouveau compte</arg>
<arg>timeout=60s</arg>
</arguments>
<status status="PASS" starttime="20230910 14:24:09.261" endtime="20230910 14:24:09.301"></status>
</kw>
<status status="PASS" starttime="20230910 14:24:09.261" endtime="20230910 14:24:09.302"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20230910 14:24:09.302" endtime="20230910 14:24:11.897"></status>
</kw>
<tags>
<tag>Facebook</tag>
<tag>Transparency</tag>
</tags>
<status status="PASS" starttime="20230910 14:23:50.088" endtime="20230910 14:24:11.897" critical="yes"></status>
</test>
<status status="PASS" starttime="20230910 14:23:49.330" endtime="20230910 14:24:11.898"></status>
</suite>
<suite id="s1-s2" name="RestAPITests" source="C:\Users\Antec\eclipse-workspace\Automation-Demo\RestAPITests.robot">
<test id="s1-s2-t1" name="GET an existing user, notice how the schema gets more accurate">
<kw name="Get" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a GET request to the endpoint.*</doc>
<arguments>
<arg>/users/1</arg>
</arguments>
<status status="PASS" starttime="20230910 14:24:11.915" endtime="20230910 14:24:12.198"></status>
</kw>
<kw name="Output Schema" library="REST">
<tags>
<tag>I/O</tag>
</tags>
<doc>*Outputs JSON Schema to terminal or a file.*</doc>
<arguments>
<arg>response body</arg>
</arguments>
<msg timestamp="20230910 14:24:12.199" level="INFO">
{
    "type": "object",
    "properties": {
        "id": {
            "type": "integer",
            "default": 1
        },
        "name": {
            "type": "string",
            "default": "Leanne Graham"
        },
        "username": {
            "type": "string",
            "default": "Bret"
        },
        "email": {
            "type": "string",
            "default": "Sincere@april.biz"
        },
        "address": {
            "type": "object",
            "properties": {
                "street": {
                    "type": "string",
                    "default": "Kulas Light"
                },
                "suite": {
                    "type": "string",
                    "default": "Apt. 556"
                },
                "city": {
                    "type": "string",
                    "default": "Gwenborough"
                },
                "zipcode": {
                    "type": "string",
                    "default": "92998-3874"
                },
                "geo": {
                    "type": "object",
                    "properties": {
                        "lat": {
                            "type": "string",
                            "default": "-37.3159"
                        },
                        "lng": {
                            "type": "string",
                            "default": "81.1496"
                        }
                    },
                    "required": [
                        "lat",
                        "lng"
                    ]
                }
            },
            "required": [
                "city",
                "geo",
                "street",
                "suite",
                "zipcode"
            ]
        },
        "phone": {
            "type": "string",
            "default": "1-770-736-8031 x56442"
        },
        "website": {
            "type": "string",
            "default": "hildegard.org"
        },
        "company": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "default": "Romaguera-Crona"
                },
                "catchPhrase": {
                    "type": "string",
                    "default": "Multi-layered client-server neural-net"
                },
                "bs": {
                    "type": "string",
                    "default": "harness real-time e-markets"
                }
            },
            "required": [
                "bs",
                "catchPhrase",
                "name"
            ]
        }
    },
    "required": [
        "address",
        "company",
        "email",
        "id",
        "name",
        "phone",
        "username",
        "website"
    ]
}</msg>
<status status="PASS" starttime="20230910 14:24:12.199" endtime="20230910 14:24:12.217"></status>
</kw>
<kw name="Object" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON object.*</doc>
<arguments>
<arg>response body</arg>
</arguments>
<status status="PASS" starttime="20230910 14:24:12.217" endtime="20230910 14:24:12.220"></status>
</kw>
<kw name="Integer" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON integer.*</doc>
<arguments>
<arg>response body id</arg>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20230910 14:24:12.221" endtime="20230910 14:24:12.221"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>response body name</arg>
<arg>Leanne Graham</arg>
</arguments>
<status status="PASS" starttime="20230910 14:24:12.222" endtime="20230910 14:24:12.222"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>response body name</arg>
<arg>Bret</arg>
</arguments>
<status status="PASS" starttime="20230910 14:24:12.222" endtime="20230910 14:24:12.223"></status>
</kw>
<kw name="Output Schema" library="REST" type="teardown">
<tags>
<tag>I/O</tag>
</tags>
<doc>*Outputs JSON Schema to terminal or a file.*</doc>
<msg timestamp="20230910 14:24:12.224" level="INFO">
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "GET https://jsonplaceholder.typicode.com/users/1",
    "description": "Automation-Demo.RestAPITests: GET an existing user, notice how the schema gets more accurate",
    "default": true,
    "examples": [],
    "type": "object",
    "properties": {
        "request": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "null"
                },
                "query": {
                    "type": "object"
                }
            }
        },
        "response": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "default": 1,
                            "enum": [
                                1
                            ]
                        },
                        "name": {
                            "type": "string",
                            "default": "Leanne Graham",
                            "enum": [
                                "Leanne Graham",
                                "Bret"
                            ]
                        },
                        "username": {
                            "type": "string",
                            "default": "Bret"
                        },
                        "email": {
                            "type": "string",
                            "default": "Sincere@april.biz"
                        },
                        "address": {
                            "type": "object",
                            "properties": {
                                "street": {
                                    "type": "string",
                                    "default": "Kulas Light"
                                },
                                "suite": {
                                    "type": "string",
                                    "default": "Apt. 556"
                                },
                                "city": {
                                    "type": "string",
                                    "default": "Gwenborough"
                                },
                                "zipcode": {
                                    "type": "string",
                                    "default": "92998-3874"
                                },
                                "geo": {
                                    "type": "object",
                                    "properties": {
                                        "lat": {
                                            "type": "string",
                                            "default": "-37.3159"
                                        },
                                        "lng": {
                                            "type": "string",
                                            "default": "81.1496"
                                        }
                                    },
                                    "required": [
                                        "lat",
                                        "lng"
                                    ]
                                }
                            },
                            "required": [
                                "city",
                                "geo",
                                "street",
                                "suite",
                                "zipcode"
                            ]
                        },
                        "phone": {
                            "type": "string",
                            "default": "1-770-736-8031 x56442"
                        },
                        "website": {
                            "type": "string",
                            "default": "hildegard.org"
                        },
                        "company": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "default": "Romaguera-Crona"
                                },
                                "catchPhrase": {
                                    "type": "string",
                                    "default": "Multi-layered client-server neural-net"
                                },
                                "bs": {
                                    "type": "string",
                                    "default": "harness real-time e-markets"
                                }
                            },
                            "required": [
                                "bs",
                                "catchPhrase",
                                "name"
                            ]
                        }
                    },
                    "required": [
                        "address",
                        "company",
                        "email",
                        "id",
                        "name",
                        "phone",
                        "username",
                        "website"
                    ],
                    "examples": [
                        {
                            "id": 1,
                            "name": "Leanne Graham",
                            "username": "Bret",
                            "email": "Sincere@april.biz",
                            "address": {
                                "street": "Kulas Light",
                                "suite": "Apt. 556",
                                "city": "Gwenborough",
                                "zipcode": "92998-3874",
                                "geo": {
                                    "lat": "-37.3159",
                                    "lng": "81.1496"
                                }
                            },
                            "phone": "1-770-736-8031 x56442",
                            "website": "hildegard.org",
                            "company": {
                                "name": "Romaguera-Crona",
                                "catchPhrase": "Multi-layered client-server neural-net",
                                "bs": "harness real-time e-markets"
                            }
                        }
                    ]
                }
            }
        }
    }
}</msg>
<status status="PASS" starttime="20230910 14:24:12.223" endtime="20230910 14:24:12.232"></status>
</kw>
<tags>
<tag>Employed</tag>
<tag>Transparency</tag>
</tags>
<status status="PASS" starttime="20230910 14:24:11.915" endtime="20230910 14:24:12.232" critical="yes"></status>
</test>
<doc>Test data can be read from variables and files.
Both JSON and Python type systems are supported for inputs.
Every request creates a so-called instance. Can be `Output`.
Most keywords are effective only for the last instance.
Initial schemas are autogenerated for request and response.
You can make them more detailed by using assertion keywords.
The assertion keywords correspond to the JSON types.
They take in either path to the property or a JSONPath query.
Using (enum) values in tests optional. Only type is required.
All the JSON Schema validation keywords are also supported.
Thus, there is no need to write any own validation logic.
Not a long path from schemas to full Swagger/OpenAPI specs.
The persistence of the created instances is the test suite.
Use keyword `Rest instances` to output the created instances.</doc>
<status status="PASS" starttime="20230910 14:24:11.900" endtime="20230910 14:24:12.232"></status>
</suite>
<status status="PASS" starttime="20230910 14:23:49.289" endtime="20230910 14:24:12.238"></status>
</suite>
<statistics>
<total>
<stat pass="3" fail="0">Critical Tests</stat>
<stat pass="3" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">Employed</stat>
<stat pass="1" fail="0">Facebook</stat>
<stat pass="1" fail="0">JMap</stat>
<stat pass="3" fail="0">Transparency</stat>
</tag>
<suite>
<stat pass="3" fail="0" id="s1" name="Automation-Demo">Automation-Demo</stat>
<stat pass="2" fail="0" id="s1-s1" name="AdminDemo">Automation-Demo.AdminDemo</stat>
<stat pass="1" fail="0" id="s1-s2" name="RestAPITests">Automation-Demo.RestAPITests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
